*     File amparm.f : Sat Mar 18 19:44:57 2000
*     Generated by GRACE (Fortran source code generator)
*         Ver.2.1.5(2) 1998/05/11
*     (c)copyright 1990-1998 Minami-Tateya Group, Japan
*-----------------------------------------------------------------------
** defined in all.fin
      subroutine amparm
      implicit real*8(a-h,o-z)
      include 'inclm.h'
      include 'inclc.h'
      complex*16 zr, zi
      save       zr, zi
      zr = dcmplx(1.0d0, 0.0d0)
      zi = dcmplx(0.0d0, 1.0d0)
*-----------------------------------------------------------------------
*     call sminit(   1,   1)
*-----------------------------------------------------------------------
* coupling constants
      zero      =   0.0d0
      one       =   1.0d0
      two       =   2.0d0
      three     =   3.0d0
      four      =   4.0d0
*  QED coupling constant
      r2        =   sqrt(two)
      r2i       =   one/r2
      ge2       =   four*pi*alpha
      ge        =   sqrt(ge2)
      ge2h      =   ge2/two
      cqed      =   ge
*  Electric charges
      ql        = - one
      qu        =   two/three
      qd        = - one/three
      qp        =   one
      qn        =   zero
*  Electro-weak coupling constants
*   Gauge coupling constants
      amw2      =   amw**2
      amh2      =   amh**2
      gcos      =   amw/amz
      gcos2     =   gcos**2
      gsin      =   sqrt(one-gcos2)
      gtan      =   gsin/gcos
      gcosi     =   one/gcos
      gcos2i    =   one/gcos2
      gcosd     =   two*gcos2 - one
      gg        =   ge/gsin
      gg2       =   gg**2
      ggh       =   gg/two
      gg2h      =   gg2/two
*   SSS and SSSS
      gs        =   gg *amh2/(two *amw )
      gs2       =   gg2*amh2/(four*amw2)
*   FFW
      gwfl      =   gg*r2i
*   FFA
      gal       =   ql*ge
      gau       =   qu*ge
      gad       =   qd*ge
      gap       =   qp*ge
*   FFZ
      gza       =   ggh*gcosi
      gzc       =   gg*gtan*gsin
      gznl      =   gza
      gzll      = - ql*gzc - gza
      gzlr      = - ql*gzc
      gzul      = - qu*gzc + gza
      gzur      = - qu*gzc
      gzdl      = - qd*gzc - gza
      gzdr      = - qd*gzc
      gzpl      = - qp*gzc - gza
      gzpr      = - qp*gzc
*   SFF
      gx        =   gg*r2i/amw
      g3        =   ggh/amw
* QCD coupling constants
      cqcd      =   one
*=======================================
* VVV
*---------------------------------------
        czww    = zr*( gg*gcos)
        caww    = zr*( ge)
        cggg    = zr*( cqcd)
*---------------------------------------
* VVVV
*---------------------------------------
       cwwaa    = zr*( ge2)
       cwwza    = zr*( ge*gg*gcos)
       cwwzz    = zr*( gg2*gcos2)
       cwwww    = zr*(-gg2)
       cgggg    = zr*( cqcd**2)
*---------------------------------------
* SSV
*---------------------------------------
        cwhm    = zi*( ggh)
        cwhp    = zi*( ggh)
        cwym    = zr*( ggh)
        cwyp    = zr*(-ggh)
        czpm    = zr*(-ggh*gcosd*gcosi)
        capm    = zr*(-ge)
        czhy    = zi*( ggh*gcosi)
*---------------------------------------
* SVV
*---------------------------------------
        chww    = zr*( gg*amw)
        chzz    = zr*( gg*amz*gcosi)
        cwzm    = zi*( ge*amz*gsin)
        cwam    = zi*(-ge*amw)
        cwzp    = zi*(-ge*amz*gsin)
        cwap    = zi*( ge*amw)
*---------------------------------------
* SSVV
*---------------------------------------
       cwwhh    = zr*( gg2h)
       czzhh    = zr*( gg2h*gcos2i)
       cwzhm    = zi*( ge2h*gcosi)
       cwzhp    = zi*(-ge2h*gcosi)
       cwahm    = zi*(-ge*ggh)
       cwahp    = zi*( ge*ggh)
       cwwyy    = zr*( gg2h)
       czzyy    = zr*( gg2h*gcos2i)
       cwzym    = zr*( ge2h*gcosi)
       cwzyp    = zr*( ge2h*gcosi)
       cwaym    = zr*(-ge*ggh)
       cwayp    = zr*(-ge*ggh)
       cwwpm    = zr*( gg2h)
       czzpm    = zr*( gg2h*(gcosd*gcosi)**2)
       caapm    = zr*( two*ge2)
       czapm    = zr*( ge*gg*gcosd*gcosi)
*---------------------------------------
* SSS
*---------------------------------------
        chpm    = zr*(-gs)
        chyy    = zr*(-gs)
        chhh    = zr*(-three*gs)
*---------------------------------------
* SSSS
*---------------------------------------
       chhhh    = zr*(-three*gs2)
       cyyyy    = zr*(-three*gs2)
       cpmyy    = zr*(-gs2)
       chhpm    = zr*(- gs2)
       chhyy    = zr*(-gs2)
       cpmpm    = zr*(-two*gs2)
        do 100 i = 1, 3
*---------------------------------------
* FFV (FFW : without quark mixing)
*---------------------------------------
            cwln(1,i) = zr*( gwfl)
            cwln(2,i) = zr*0
            cwnl(1,i) = zr*( gwfl)
            cwnl(2,i) = zr*0
            cwdu(1,i) = zr*( gwfl)
            cwdu(2,i) = zr*0
            cwud(1,i) = zr*( gwfl)
            cwud(2,i) = zr*0
*---------------------------------------
* FFV (FFA)
*---------------------------------------
        call(1,i) = zr*( gal)
        call(2,i) = zr*( gal)
        cauu(1,i) = zr*( gau)
        cauu(2,i) = zr*( gau)
        cadd(1,i) = zr*( gad)
        cadd(2,i) = zr*( gad)
*---------------------------------------
* FFV (FFZ)
*---------------------------------------
        cznn(1,i) = zr*( gznl)
        cznn(2,i) = zr*0
        czll(1,i) = zr*( gzll)
        czll(2,i) = zr*( gzlr)
        czuu(1,i) = zr*( gzul)
        czuu(2,i) = zr*( gzur)
        czdd(1,i) = zr*( gzdl)
        czdd(2,i) = zr*( gzdr)
*---------------------------------------
* FFV (FFg)
*---------------------------------------
        cguu(1,i) = zr*( cqcd)
        cguu(2,i) = zr*( cqcd)
        cgdd(1,i) = zr*( cqcd)
        cgdd(2,i) = zr*( cqcd)
*---------------------------------------
* XFF
*---------------------------------------
        cmdu(1,i) = zi*( amdq(i)*gx)
        cmdu(2,i) = zi*(-amuq(i)*gx)
        cpud(1,i) = zi*( amuq(i)*gx)
        cpud(2,i) = zi*(-amdq(i)*gx)
*---------------------------------------
* HFF
*---------------------------------------
        chll(1,i) = zr*(-amlp(i)*g3)
        chll(2,i) = zr*(-amlp(i)*g3)
        chuu(1,i) = zr*(-amuq(i)*g3)
        chuu(2,i) = zr*(-amuq(i)*g3)
        chdd(1,i) = zr*(-amdq(i)*g3)
        chdd(2,i) = zr*(-amdq(i)*g3)
*---------------------------------------
* FFX3
*---------------------------------------
        cyuu(1,i) = zi*( amuq(i)*g3)
        cyuu(2,i) = zi*(-amuq(i)*g3)
        cydd(1,i) = zi*(-amdq(i)*g3)
        cydd(2,i) = zi*( amdq(i)*g3)
  100   continue
*---------------------------------------
* FFV (FFA) for proton
*---------------------------------------
        capp(1) = zr*( gap)
        capp(2) = zr*( gap)
        capx(1) = zr*( gap)
        capx(2) = zr*( gap)
*---------------------------------------
* FFV (FFZ) for proton
*---------------------------------------
*        czpp(1) = zr*( gzpl)
*        czpp(2) = zr*( gzpr)
*---------------------------------------
* CCV
*---------------------------------------
       cwczp    = zr*(-gg*gcos)
       cwcmz    = zr*( gg*gcos)
       cwcap    = zr*(-ge)
       cwcma    = zr*( ge)
       cwczm    = zr*( gg*gcos)
       cwcpz    = zr*(-gg*gcos)
       cwcam    = zr*( ge)
       cwcpa    = zr*(-ge)
       czcmm    = zr*(-gg*gcos)
       czcpp    = zr*( gg*gcos)
       cacmm    = zr*(-ge)
       cacpp    = zr*( ge)
       cgcgg    = zr*( cqcd)
*---------------------------------------
* SCC
*---------------------------------------
       cpczp    = zi*(-ggh*gcosd*amz)
       cpcap    = zi*(-ge*amw)
       cpcmz    = zi*( ggh*amz)
       cmczm    = zi*( ggh*gcosd*amz)
       cmcam    = zi*( ge*amw)
       cmcpz    = zi*(-ggh*amz)
       cycmm    = zi*(-ggh*amw)
       cycpp    = zi*( ggh*amw)
       chcmm    = zr*(-ggh*amw)
       chcpp    = zr*(-ggh*amw)
       chczz    = zr*(-ggh*gcosi*amz)
*>>> Checking alpha0...
       if (alpha0 .LE. 0) then
          write(6,*) '!!!Error in AMPARM!!!'
          write(6,*) '  ---> alpha0 =', alpha0
          write(6,*) '  ---> Good By!'
          STOP
       endif
      return
      end
