**************************************************************************
* << Calculation of W1,W2 using the parameterization of Brasse et al. >> *
*                          Written by Tetsuo ABE                         *
*                              on 10/03/2000                             *
**************************************************************************
* Ref: Nucl. Phys. B110 (1976) 413
***************************************************
* Input:  Q2   in GeV^2        (real*8)
*         W    in GeV          (real*8)
* Output: W1                   (real*8)
*         W2                   (real*8)
***************************************************
      subroutine BRASSE(Q2,W, W1,W2)
      implicit NONE
*---------- Argument ----------
      double precision  Q2,W        ! Input
      double precision  W1,W2       ! Output
*------------------------------
*-------- Function --------
      double precision  BRASSE_SigTot, R_LT
      external          BRASSE_SigTot, R_LT
*--------------------------
*------ Local variables ------
*(Constants)
      double precision  pi, alpha, Mp,MpMp,DMp, const, GeVpb
*(Misc.)
      integer  icount
      double precision  WW, nu, R, eps, K, x
      save  icount, pi, alpha, Mp,MpMp,DMp, const, GeVpb
*-----------------------------
*---------- DATA ----------
      data  icount/0/
*--------------------------
      if (icount .EQ. 0) then
        pi    = acos(-1D0)
        alpha = 1.0d0/137.0359895D0
        Mp    = 0.93827231D0
        MpMp  = Mp**2
        DMp   = Mp*2D0
        const = 4D0 *pi**2 *alpha
        GeVpb = 0.38937966D9
        icount = icount + 1
      endif
      WW = W*W
      x = Q2 / (Q2+(WW-MpMp))
      R = R_LT(x,Q2)
      eps = 1.0
      K = (WW-MpMp) /DMp
      W1 = K/const /(1D0+eps*R) *BRASSE_SigTot(Q2,W) *1D6 /GeVpb
      nu = (WW+Q2-MpMp) /DMp
      W2 = Q2/(Q2+nu*nu) *(1D0+R) *W1
      return
      end
*#####################################################################
      double precision function BRASSE_SigTot(Q2,W)
      implicit NONE
*---------- Argument ----------
      double precision  Q2,W      ! Input
*------------------------------
*------ Local variables ------
*(Parameters)
      integer     N_Wbins
       parameter( N_Wbins=56 )
      real  Wbins(0:N_Wbins)
     &     ,a1(N_Wbins),a2(N_Wbins),a3(N_Wbins)
     &     ,b1(N_Wbins),b2(N_Wbins),b3(N_Wbins)
     &     ,c1(N_Wbins),c2(N_Wbins),c3(N_Wbins)
      real         Wmin,       Wmax
       parameter ( Wmin=1.080, Wmax=2.001 )
      save  Wbins, a1,a2,a3, b1,b2,b3, c1,c2,c3
*(Misc.)
      double precision  WW,nu,q,q0,MpMp,DMp, Ge2, SigTot1,SigTot2
C     &                 ,y,y_1,MeMe,Q2min
     &                 ,eps, a,b,c, log_q_q0
       parameter ( MpMp=0.8803549277D0      ! Mp**2
     &            ,DMp =1.87654462D0        ! Mp*2
C     &            ,MeMe=2.6112004954D-07    ! Me**2
     &           )
      integer  i,iW
      logical  lBingo
*-----------------------------
*---------- DATA ----------
      data  Wbins/ Wmin,
     &       1.110,1.125,1.140,1.155,1.170,1.185,1.200,1.215,1.230,1.245
     &      ,1.260,1.275,1.290,1.305,1.320,1.335,1.350,1.365,1.380,1.395
     &      ,1.410,1.425,1.440,1.455,1.470,1.485,1.500,1.515,1.530,1.545
     &      ,1.560,1.575,1.590,1.605,1.620,1.635,1.650,1.665,1.680,1.695
     &      ,1.710,1.725,1.740,1.755,1.770,1.790,1.810,1.830,1.850,1.870
     &      ,1.890,1.910,1.930,1.950,1.970,1.990
     &           /
      data  a1/
     &       5.045,5.126,5.390,5.621,5.913,5.955,6.139,6.178,6.125,5.999
     &      ,5.769,5.622,5.431,5.288,5.175,5.131,5.003,5.065,5.045,5.078
     &      ,5.145,5.156,5.234,5.298,5.371,5.457,5.543,5.519,5.465,5.384
     &      ,5.341,5.328,5.275,5.296,5.330,5.375,5.428,5.478,5.443,5.390
     &      ,5.333,5.296,5.223,5.159,5.146,5.143,5.125,5.158,5.159,5.178
     &      ,5.182,5.195,5.160,5.195,5.163,5.172
     &        /
      data  a2/
     &      -0.050,1.082,4.119,3.898,5.990,6.033,6.160,6.219,6.117,5.959
     &      ,5.451,5.675,5.417,5.238,5.084,4.913,4.458,5.012,5.128,5.140
     &      ,5.261,5.370,5.416,5.466,5.508,5.578,5.629,5.623,5.555,5.503
     &      ,5.471,5.419,5.390,5.423,5.396,5.451,5.400,5.446,5.448,5.421
     &      ,5.308,5.248,5.193,5.099,5.076,5.054,5.064,5.028,5.080,5.076
     &      ,5.173,5.011,5.136,5.055,5.035,5.059
     &        /
      data  a3/
     &      -3.024,3.796,6.003,6.339,6.071,6.834,6.166,6.239,6.149,5.988
     &      ,5.155,5.727,5.454,5.262,5.230,5.153,4.365,5.168,5.162,5.174
     &      ,5.335,5.378,5.396,5.436,5.564,5.615,5.574,5.560,5.470,5.394
     &      ,5.317,5.346,5.311,5.314,5.323,5.271,5.315,5.373,5.433,5.235
     &      ,5.249,5.180,5.071,5.072,5.071,5.036,4.985,4.976,5.021,5.000
     &      ,5.007,4.980,5.025,5.031,5.018,5.108
     &        /
      data  b1/
     &       0.798,1.052,1.213,1.334,1.397,1.727,1.750,1.878,1.887,1.927
     &      ,2.041,2.089,2.148,2.205,2.344,2.324,2.535,2.464,2.564,2.610
     &      ,2.609,2.678,2.771,2.890,2.982,3.157,3.188,3.315,3.375,3.450
     &      ,3.477,3.471,3.554,3.633,3.695,3.804,3.900,4.047,4.290,4.519
     &      ,4.709,4.757,4.840,5.017,5.015,5.129,5.285,5.322,5.546,5.623
     &      ,5.775,5.894,6.138,6.151,6.301,6.542
     &        /
      data  b2/
     &       4.849,4.120,2.244,2.824,1.257,1.548,1.730,1.805,1.866,1.914
     &      ,2.272,1.840,2.102,2.221,2.368,2.622,3.146,2.537,2.473,2.533
     &      ,2.610,2.461,2.570,2.700,2.799,2.929,3.016,3.128,3.215,3.271
     &      ,3.288,3.328,3.390,3.376,3.567,3.600,3.945,4.046,4.124,4.270
     &      ,4.667,4.818,4.856,5.069,5.112,5.236,5.331,5.609,5.628,5.819
     &      ,5.461,6.391,5.995,6.455,6.565,7.063
     &        /
      data  b3/
     &       6.613,1.935,0.774,0.653,1.017,0.709,1.699,1.768,1.929,1.943
     &      ,2.703,1.892,1.932,2.244,2.040,1.980,3.206,2.109,2.587,2.479
     &      ,2.493,2.437,2.581,2.324,2.699,2.971,3.207,3.325,3.375,3.466
     &      ,3.563,3.366,3.477,3.279,3.691,3.965,4.148,4.106,4.035,4.687
     &      ,4.738,4.782,5.218,5.050,5.062,4.979,5.532,5.659,5.677,6.081
     &      ,6.110,6.366,6.433,6.079,6.650,6.644
     &        /
      data  c1/
     &      0.043,0.024,0.000,-.013,-.023,-.069,-.060,-.080,-0.065,-.056
     &     ,-.065,-.056,-.043,-.034,-.054,-.018,-.046,-.015,-0.029,-.048
     &     ,-.032,-.046,-.084,-.115,-.105,-.159,-.164,-.181,-0.203,-.220
     &     ,-.245,-.264,-.239,-.302,-.299,-.318,-.388,-.393,-0.466,-.588
     &     ,-.622,-.568,-.574,-.727,-.665,-.704,-.856,-.798,-1.048,-.980
     &     ,-1.021,-1.092,-1.313,-1.341,-1.266,-1.473
     &        /
      data  c2/
     &    -.285,-.212,-.100,-.155,-.006,-.025,-.066,-0.086,-0.071,-0.054
     &   ,-.084,0.012,-.037,-.046,-.058,-.085,-.131,-0.031,-0.031,-0.033
     &   ,-.093,0.000,-.052,-.083,-.093,-.104,-.096,-0.163,-0.173,-0.192
     &   ,-.191,-.202,-.239,-.168,-.286,-.239,-.408,-0.402,-0.355,-0.400
     &   ,-.603,-.642,-.637,-.773,-.768,-.879,-.941,-1.075,-1.118,-1.223
     &   ,-0.812,-1.581,-1.219,-1.605,-1.055,-4.060
     &        /
      data  c3/
     &    -.350,-.005,0.036,0.054,0.053,0.083,-.054,-0.059,-0.087,-0.060
     &   ,-.158,-.017,0.064,-.050,0.071,0.169,-.155, 0.159,-0.106,-0.046
     &   ,-.071,0.005,-.089,0.171,-.098,-.182,-.216,-0.199,-0.192,-0.195
     &   ,-.256,-.152,-.274,-.017,-.373,-.509,-.537,-0.425,-0.286,-0.652
     &   ,-.631,-.555,-.941,-.719,-.645,-.474,-.960,-1.124,-1.088,-1.359
     &   ,-1.350,-1.574,-1.921,-0.926,-1.845,-2.098
     &        /
*--------------------------
C      if (W.LT.Wmin .OR. W.GT.Wmax) then
      if (W.GT.Wmax) then
        write(6,*) '!!!Warning in BRASSE_SigTot!!!'
        write(6,*) '  ---> W =', real(W)
        write(6,*) '       is outside the domain.'
        write(6,*) '  ---> Wmin,Wmax =', real(Wmin),',',real(Wmax)
      endif
      WW = W*W
      nu = (WW+Q2-MpMp) /DMp
      q  = sqrt(nu*nu+Q2)
      nu = (WW   -MpMp) /DMp
C     q0 = sqrt(nu*nu   )
      q0 = nu
      log_q_q0 = log(q/q0)
      Ge2 = 1D0 /(1D0+Q2/0.71D0)**4
C      y = (WW+Q2-MpMp) /(s-MpMp)
C      if (y.LE.0 .OR. y.GE.1) then
C        write(6,*) '!!!Error in BRASSE_SigTot!!!'
C        write(6,*) '  ---> y =', real(y)
C        write(6,*) '       is outside the domain.'
C        write(6,*) '  ---> Good-bye!'
C        STOP
C      endif
C      y_1 = 1D0 - y
C      Q2min = MeMe *y*y /y_1
C      eps = 1D0 /(0.5D0/y_1 +y_1/2D0 -Q2min/Q2)
C      if (eps .LT. 0) then
C        write(6,*) '!!!Warning in BRASSE_SigTot!!!'
C        write(6,*) '  ---> eps =', real(eps)
C        write(6,*) '       is outside the domain.'
C      endif
      eps = 1.0
      if     (W .LE. Wmin) then
        BRASSE_SigTot = 0D0
        RETURN
      elseif (Wmin.LT.W .AND. W.LT.Wbins(1)) then
        SigTot1 = 0D0
        iW      = 1
        lBingo = .false.
        goto 2001
      elseif (W .GE. Wbins(N_Wbins)) then
        iW     = N_Wbins
        lBingo = .true.
        goto 2001
      else
        lBingo = .false.
        do i = 1, N_Wbins-1
          if (W .EQ. Wbins(i)) then
            iW     =  i
            lBingo = .true.
            goto 2001
          else
            if (Wbins(i).LT.W .AND. W.LT.Wbins(i+1)) then
               iW = i
               goto 1000
            endif
          endif
        enddo
      endif
 1000 continue
      if     (eps .GE. 0.9) then
         a = a1(iW)
         b = b1(iW)
         c = c1(iW)
      elseif (eps .GT. 0.6) then
         a = a2(iW)
         b = b2(iW)
         c = c2(iW)
      else
         a = a3(iW)
         b = b3(iW)
         c = c3(iW)
      endif
      SigTot1 = Ge2 *exp( a+b*log_q_q0+c*abs(log_q_q0)**3 )
 2000 continue
      iW = iW + 1
 2001 continue
      if     (eps .GE. 0.9) then
         a = a1(iW)
         b = b1(iW)
         c = c1(iW)
      elseif (eps .GT. 0.6) then
         a = a2(iW)
         b = b2(iW)
         c = c2(iW)
      else
         a = a3(iW)
         b = b3(iW)
         c = c3(iW)
      endif
      SigTot2 = Ge2 *exp( a+b*log_q_q0+c*abs(log_q_q0)**3 )
 3000 continue
      if (lbingo) then
        BRASSE_SigTot = SigTot2
      else
        if     (SigTot1 .LT. SigTot2) then
          BRASSE_SigTot =
     &          SigTot2 -(SigTot2-SigTot1)
     &                    *(Wbins(iW)  -W)/(Wbins(iW)-Wbins(iW-1))
        elseif (SigTot1 .GT. SigTot2) then
          BRASSE_SigTot =
     &          SigTot1 -(SigTot1-SigTot2)
     &                    *(W-Wbins(iW-1))/(Wbins(iW)-Wbins(iW-1))
        else
          BRASSE_SigTot = SigTot2
        endif
      endif
      return
      end
